geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point()
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
require(survival)
data("rats")
data(rats)
rats
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
require(devtools)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent)
# A couple extra packages
require(ggplot2)
require(survival)
require(mets)
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
simres1 <- powerest(nsims = 100,
n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
alpha = 0.05,
crate = 0.03,
accrualtime = 10,
admincens = 30)
library(tidyverse, quietly = T)
library(gganimate, quietly = T)
cone <- data.frame(x = 1:9,
y = c(1:5,4:1)) %>%
arrange(x)
fancy <- cone %>%
mutate(xoff = ifelse(x<5, x+.4, ifelse(x>5, x-.4, NA))) %>%
gather(del, x, contains("x")) %>%
mutate(y = ifelse(del=="xoff", y-.1,y)) %>%
filter(y>=1) %>%
na.omit() %>%
select(-del) %>%
arrange(y)
decoration_colours <- c("#e5d08f", "#e3d4b6",
"#cacbce", "#9c9c9c", "#e1dfdf",
"#c94c4c", "#8d1414")
decorations <- cone %>%
# Group by y, nest and make up some random values for x.
group_by(y) %>%
nest() %>%
mutate(data =  map(data, ~data.frame(x=seq(min(.$x), max(.$x), by=.1)))) %>%
unnest(cols = c(data)) %>%
# Group by x, nest and make up some random values for y.
group_by(x) %>%
nest() %>%
mutate(data =  map(data, ~data.frame(y=seq(min(.$y), max(.$y), by=.1)))) %>%
unnest(cols = c(data)) %>%
ungroup() %>%
# Give decorations random shapes, sizes and two different colours.
mutate(col1 = sample(decoration_colours, nrow(.), replace = T),
col2 = sample(decoration_colours, nrow(.), replace = T),
shp = sample(1:7, nrow(.), replace = T),
sz = sample(seq(.5,2,by=.1), nrow(.), replace = T),
time = sample(seq(.5,1,by=.01), nrow(.), replace = T)
) %>%
rownames_to_column() %>%
# Grab only 60 decorations
sample_n(60) %>%
# Gather the colours into a single column
gather(dd, cols, contains("col")) %>%
mutate(alph = ifelse(dd == "col1", .8, 1))
snow <- data.frame(x = sample(seq(1, max(cone$x)+1, by=.01), 100, replace = F),
y = sample(seq(1, max(cone$y)+1, by=.01), 100, replace = F)) %>%
group_by(x) %>%
nest() %>%
mutate(data =  map(data,
~data.frame(y=seq(.$y, .$y-sample(seq(.5,1,by=.01),1), length.out = 100)) %>%
mutate(time = sample(seq(0.5,.9, .01), 1)) %>%
mutate(time = seq(unique(time), unique(time)+.02, length.out = nrow(.)))
)) %>%
unnest(cols = c(data))
cone %>%
ggplot(aes(x=x, y=y)) +
# Snow
geom_jitter(data=snow, aes(group=x), colour="white", shape=8, size=1) +
# Cone
geom_polygon(fill="#213c18") +
# Fancy
geom_polygon(data=fancy, fill = "#668c6f") +
# Baubles
geom_point(data = decorations %>% select(-time), show.legend = F, alpha = .7,
aes(colour=I(cols), fill=I(cols),
shape = factor(shp),size=sz, group=rowname)) +
# animated decorations!
geom_point(data = decorations, show.legend = F,
aes(colour=I(cols), fill=I(cols), alpha=I(alph),
shape = factor(shp),size=sz, group=rowname)) +
# Topper
geom_point(data=data.frame(x=5, y=5), colour="#e5d08f", size=15, shape=8) +
scale_shape_manual(values = c(20:25,8)) +
# remove axes etc., and make background black
theme_void() +
theme(plot.background = element_rect(fill="black"), title = element_text(colour="white")) +
# Animate
transition_time(time) +
ease_aes('sine-in-out')
install.packages("tidyverse")
require(gganimate)
install.packages("gganimate")
install.packages("=targets=")
install.packages("targets")
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
lava::NR
require(devtools)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent)
# A couple extra packages
require(ggplot2)
require(survival)
require(mets)
detach("package:simpowerrecurrent", unload = TRUE)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent)
# A couple extra packages
require(ggplot2)
require(survival)
require(mets)
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
simres1 <- powerest(nsims = 100,
n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
alpha = 0.05,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(simres1$resmat)
simres1$power
simres1$betamean
simres1$betasemean
detach("package:simpowerrecurrent", unload = TRUE)
require(devtools)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent)
# A couple extra packages
require(ggplot2)
require(survival)
require(mets)
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
simres1 <- powerest(nsims = 100,
n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
alpha = 0.05,
crate = 0.03,
accrualtime = 10,
admincens = 30)
require(dplyr)
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
simres1 <- powerest(nsims = 100,
n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
alpha = 0.05,
crate = 0.03,
accrualtime = 10,
admincens = 30)
detach("package:simpowerrecurrent", unload = TRUE)
require(devtools)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent)
# A couple extra packages
require(ggplot2)
require(survival)
require(mets)
require(dplyr)
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
simres1 <- powerest(nsims = 100,
n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
alpha = 0.05,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(simres1$resmat)
simres1$power
simres1$betamean
simres1$betasemean
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.2,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.1,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
simres1 <- powerest(nsims = 100,
n = 100,
beta = -0.1,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
alpha = 0.05,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(simres1$resmat)
simres1$power
simres1$betamean
simres1$betasemean
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
require(devtools)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent)
# A couple extra packages
require(ggplot2)
require(survival)
require(mets)
require(dplyr)
mu0 <- function(time, a){a  * time^2}
LamD0 <- function(time, b){b * time}
times <- seq(0, 100, by = 25)
cumhaz_mu <- data.frame(time = times,
cumhaz = mu0(time = times, a = 0.07))
cumhaz_S <- data.frame(time = times,
cumhaz = LamD0(time = times, b = 0.05))
# Visual
ggplot(aes(x = time, y = cumhaz), data = cumhaz_mu) +
geom_line() + ggtitle(expression(mu[0]*"(t) for recurrent events")) +
geom_point() + theme_bw()
ggplot(aes(x = time, y = cumhaz), data = cumhaz_S) +
geom_line() + ggtitle(expression(Lambda[0]^D*"(t) for terminal events")) +
geom_point() + theme_bw()
# Simulating a single data set
set.seed(1234)
sim1 <- simrecurprop(n = 100,
beta = -0.1,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(sim1)
# Overview of the data set
with(sim1, table(Z, status))
simres1 <- powerest(nsims = 100,
n = 100,
beta = -0.1,
gamma = -0.1,
mu0 = cumhaz_mu,
Lam0D = cumhaz_S,
alpha = 0.05,
crate = 0.03,
accrualtime = 10,
admincens = 30)
head(simres1$resmat)
simres1$power
simres1$betamean
simres1$betasemean
require(devtools, silemnt = T)
require(devtools, silent = T)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent)
# A couple extra packages
require(ggplot2)
require(survival)
require(mets)
require(dplyr)
detach("package:simpowerrecurrent", unload = TRUE)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE, silent = T)
devtools::install_github("JulieKFurberg/simpowerrecurrent", force = TRUE)
require(simpowerrecurrent, silent = T)
